{
  "ver": "1.0.23",
  "uuid": "f1927106-25ec-454b-968a-fd5de994f907",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  pos.x = 0.3*(pos.y - 0.1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float s_time;\n#endif\n\nfloat dot2(in vec2 v ) { return dot(v,v); }\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n  vec2 k1 = vec2(r2,he);\n  vec2 k2 = vec2(r2-r1,2.0*he);\n\n  p.x = abs(p.x);\n  vec2 ca = vec2(max(0.0,p.x-((p.y<0.0)?r1:r2)), abs(p.y)-he);\n  vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n  \n  float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n  \n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdTrapezoid( in vec2 p, in vec2 a, in vec2 b, in float ra, float rb )\n{\n  float rba  = rb-ra;\n  float baba = dot(b-a,b-a);\n  float papa = dot(p-a,p-a);\n  float paba = dot(p-a,b-a)/baba;\n  float x = sqrt( papa - paba*paba*baba );\n  float cax = max(0.0,x-((paba<0.5)?ra:rb));\n  float cay = abs(paba-0.5)-0.5;\n  float k = rba*rba + baba;\n  float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n  float cbx = x-ra - f*rba;\n  float cby = paba - f;\n  float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(cax*cax + cay*cay*baba,\n                     cbx*cbx + cby*cby*baba) );\n}\n\nfloat trapezoid(vec2 position, float halfWidth1, float halfWidth2, float halfHeight) {\n    position.x = abs(position.x);\n    position.x -= (halfWidth2 + halfWidth1) * 0.5;\n    vec2 end = vec2((halfWidth2 - halfWidth1) * 0.5, halfHeight);\n    vec2 segment = position - end * clamp(dot(position, end) / dot(end, end), -1.0, 1.0);\n    float d = length(segment);\n    if (segment.x > 0.0) {\n        return d;\n    }\n    return max(-d, abs(position.y) - halfHeight);\n}\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  gl_FragColor = o;\n\n  float iTime = s_time;\n\n  vec2 position = v_uv0;\n\n  float ANGLE = .2;\n  float SIZE = 1.7;\n  float BLUR = .9;\n  \n  vec2 p = (2. * o.xy - v_uv0.xy) / v_uv0.y * 2.;\n  \n  float d = max(abs(p.x)+ ANGLE * p.y, abs(p.y)) - SIZE;\n  float t = 1. - smoothstep(BLUR * .1, BLUR,d);\n\n  gl_FragColor = vec4(t);\n\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  pos.x = 0.3*(pos.y - 0.1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform self {\n  float width;\n  float height;\n  float distanceHeight;\n  float topx;\n  float topy;\n  float s_time;\n}\n#endif\n\nfloat dot2(in vec2 v ) { return dot(v,v); }\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n  vec2 k1 = vec2(r2,he);\n  vec2 k2 = vec2(r2-r1,2.0*he);\n\n  p.x = abs(p.x);\n  vec2 ca = vec2(max(0.0,p.x-((p.y<0.0)?r1:r2)), abs(p.y)-he);\n  vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n  \n  float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n  \n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdTrapezoid( in vec2 p, in vec2 a, in vec2 b, in float ra, float rb )\n{\n  float rba  = rb-ra;\n  float baba = dot(b-a,b-a);\n  float papa = dot(p-a,p-a);\n  float paba = dot(p-a,b-a)/baba;\n  float x = sqrt( papa - paba*paba*baba );\n  float cax = max(0.0,x-((paba<0.5)?ra:rb));\n  float cay = abs(paba-0.5)-0.5;\n  float k = rba*rba + baba;\n  float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n  float cbx = x-ra - f*rba;\n  float cby = paba - f;\n  float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(cax*cax + cay*cay*baba,\n                     cbx*cbx + cby*cby*baba) );\n}\n\nfloat trapezoid(vec2 position, float halfWidth1, float halfWidth2, float halfHeight) {\n    position.x = abs(position.x);\n    position.x -= (halfWidth2 + halfWidth1) * 0.5;\n    vec2 end = vec2((halfWidth2 - halfWidth1) * 0.5, halfHeight);\n    vec2 segment = position - end * clamp(dot(position, end) / dot(end, end), -1.0, 1.0);\n    float d = length(segment);\n    if (segment.x > 0.0) {\n        return d;\n    }\n    return max(-d, abs(position.y) - halfHeight);\n}\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  gl_FragColor = o;\n\n  float iTime = s_time;\n\n  vec2 position = v_uv0;\n\n  float ANGLE = .2;\n  float SIZE = 1.7;\n  float BLUR = .9;\n  \n  vec2 p = (2. * o.xy - v_uv0.xy) / v_uv0.y * 2.;\n  \n  float d = max(abs(p.x)+ ANGLE * p.y, abs(p.y)) - SIZE;\n  float t = 1. - smoothstep(BLUR * .1, BLUR,d);\n\n  gl_FragColor = vec4(t);\n\n}\n"
      }
    }
  ],
  "subMetas": {}
}
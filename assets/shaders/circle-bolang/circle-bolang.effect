// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        s_time: {value: 0.1}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform selfDefined{
    float s_time;
  };
  #endif

  void main () {
    // vec4 o = vec4(1, 1, 1, 1);

    // #if USE_TEXTURE
    // o *= texture(texture, v_uv0);
    //   #if CC_USE_ALPHA_ATLAS_TEXTURE
    //   o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
    //   #endif
    // #endif

    // o *= v_color;

    vec2 uv = v_uv0;
    vec2 center_p = vec2(0.5, 0.7);
    float dis = distance(center_p, uv);
    float r = 0.02+s_time*0.5;
    float width = 0.005;
    float border = 0.01;
    border *= r * 20.0;
    float circle = smoothstep(r + width + border, r + width, dis) - smoothstep(r, r -border, dis);
    circle *= 0.4;
    circle *= max(1.0 - dis, 0.0);


    // uv = uv + (uv - center_p) * circle;
    uv = uv + (uv - center_p)*(dis-r)* 2. * circle;

    vec4 tex = texture2D(texture, uv);
    // tex.xyz += circle;

    // ALPHA_TEST(o);

    gl_FragColor = vec4(tex.xyz, tex.w);
  }
}%

// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        topColor : { value : [1, 1, 1, 1], inspector: {type: color} }
        midColor : { value : [1, 1, 1, 1], inspector: {type: color} }
        botColor : { value : [1, 1, 1, 1], inspector: {type: color} }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform colors {
    vec4 topColor;
    vec4 midColor;
    vec4 botColor;
  }
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      // o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    float dis = 0.5;

    float y = v_uv0.y * 0.8;


    if(v_uv0.y < dis){
      o.rgb = (topColor.rgb*(dis-v_uv0.y)*10.0*0.2 + midColor.rgb*(v_uv0.y)*10.0*0.2);
    }else{
      o.rgb *= (midColor.rgb*(1.0-v_uv0.y)*10.0*0.2 + botColor.rgb*(v_uv0.y-dis)*10.0*0.2);
    }
    // o.rgb *= (topColor.rgb*(1.0-v_uv0.y) + midColor.rgb*(1.0-v_uv0.y));

    gl_FragColor = o;
  }
}%

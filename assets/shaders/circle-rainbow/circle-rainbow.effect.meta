{
  "ver": "1.0.23",
  "uuid": "2607e312-42ef-4d18-8181-14d2cb2e812f",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nfloat drawCircle(float raduis, float boarder, float dis) {\n  float newDis = smoothstep(raduis, raduis-boarder, dis);\n  return newDis;\n}\n\nfloat drawCircleLine(float raduis, float lineWidth, float boarder, float dis) {\n  float dis1 = drawCircle(raduis, boarder, dis);\n  float dis2 = drawCircle(raduis-lineWidth, boarder, dis);\n  return dis1 - dis2;\n}\n\nvoid main () {\n\n  vec4 o = vec4(0, 1, 0, 1);\n  vec2 point = vec2(0.5, 0);\n  float dis = distance(v_uv0, point);\n\n  float dis1 = drawCircleLine(0.5, 0.1, 0.001, dis);\n  float dis2 = drawCircleLine(0.4, 0.1, 0.001, dis);\n  float dis3 = drawCircleLine(0.3, 0.1, 0.001, dis);\n  vec3 color_red = vec3(1, 0, 0);\n  vec3 color_green = vec3(0, 1, 0);\n  vec3 color_blue = vec3(0, 0, 1);\n\n  vec3 ret = dis1 * color_red + dis2 * color_green + dis3 * color_blue;\n\n  vec4 color = vec4(ret, 1);\n\n  gl_FragColor = color;\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nfloat drawCircle(float raduis, float boarder, float dis) {\n  float newDis = smoothstep(raduis, raduis-boarder, dis);\n  return newDis;\n}\n\nfloat drawCircleLine(float raduis, float lineWidth, float boarder, float dis) {\n  float dis1 = drawCircle(raduis, boarder, dis);\n  float dis2 = drawCircle(raduis-lineWidth, boarder, dis);\n  return dis1 - dis2;\n}\n\nvoid main () {\n\n  vec4 o = vec4(0, 1, 0, 1);\n  vec2 point = vec2(0.5, 0);\n  float dis = distance(v_uv0, point);\n\n  float dis1 = drawCircleLine(0.5, 0.1, 0.001, dis);\n  float dis2 = drawCircleLine(0.4, 0.1, 0.001, dis);\n  float dis3 = drawCircleLine(0.3, 0.1, 0.001, dis);\n  vec3 color_red = vec3(1, 0, 0);\n  vec3 color_green = vec3(0, 1, 0);\n  vec3 color_blue = vec3(0, 0, 1);\n\n  vec3 ret = dis1 * color_red + dis2 * color_green + dis3 * color_blue;\n\n  vec4 color = vec4(ret, 1);\n\n  gl_FragColor = color;\n}\n"
      }
    }
  ],
  "subMetas": {}
}
{
  "ver": "1.0.23",
  "uuid": "8e3586cd-6725-40d4-a7a3-370731739979",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  float w = 640.0;\n  float h = 180.0;\n  float isShow = 1.0;\n  float edge = 0.1;\n  float side = 0.0001;\n\n  float rx = h * edge;\n  float ry = h * edge;\n\n  vec2 p_uv = vec2(v_uv0.x * w, v_uv0.y * h);\n\n  vec2 p_l_u = vec2(rx, ry);\n\n  vec2 p_l_d = vec2(rx, h - ry);\n\n  vec2 p_r_u = vec2(w -rx, ry);\n\n  vec2 p_r_d = vec2(w - rx, h - ry);\n\n  float dis0 = distance(p_uv, p_l_u);\n  dis0 = smoothstep(rx, rx - side, dis0);\n\n  float dis1 = distance(p_uv, p_l_d);\n  dis1 = smoothstep(rx, rx - side, dis1);\n\n  float dis2 = distance(p_uv, p_r_u);\n  dis2 = smoothstep(rx, rx - side, dis2);\n\n  float dis3 = distance(p_uv, p_r_d);\n  dis3 = smoothstep(rx, rx - side, dis3);\n\n  float disX = smoothstep(p_uv.x, p_uv.x - side ,rx) * smoothstep(w - rx, w - rx - side, p_uv.x);\n  float disY = smoothstep(p_uv.y, p_uv.y - side, ry) * smoothstep(h - ry, h - ry - side, p_uv.y);\n  o.a *= (disX + disY);\n  o.a += (dis0 + dis1 + dis2 + dis3);\n  gl_FragColor = o;\n\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  float w = 640.0;\n  float h = 180.0;\n  float isShow = 1.0;\n  float edge = 0.1;\n  float side = 0.0001;\n\n  float rx = h * edge;\n  float ry = h * edge;\n\n  vec2 p_uv = vec2(v_uv0.x * w, v_uv0.y * h);\n\n  vec2 p_l_u = vec2(rx, ry);\n\n  vec2 p_l_d = vec2(rx, h - ry);\n\n  vec2 p_r_u = vec2(w -rx, ry);\n\n  vec2 p_r_d = vec2(w - rx, h - ry);\n\n  float dis0 = distance(p_uv, p_l_u);\n  dis0 = smoothstep(rx, rx - side, dis0);\n\n  float dis1 = distance(p_uv, p_l_d);\n  dis1 = smoothstep(rx, rx - side, dis1);\n\n  float dis2 = distance(p_uv, p_r_u);\n  dis2 = smoothstep(rx, rx - side, dis2);\n\n  float dis3 = distance(p_uv, p_r_d);\n  dis3 = smoothstep(rx, rx - side, dis3);\n\n  float disX = smoothstep(p_uv.x, p_uv.x - side ,rx) * smoothstep(w - rx, w - rx - side, p_uv.x);\n  float disY = smoothstep(p_uv.y, p_uv.y - side, ry) * smoothstep(h - ry, h - ry - side, p_uv.y);\n  o.a *= (disX + disY);\n  o.a += (dis0 + dis1 + dis2 + dis3);\n  gl_FragColor = o;\n\n}\n"
      }
    }
  ],
  "subMetas": {}
}
// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    // gl_FragColor = o;




    // 宽高比
    // float w = 640.0;
    // float h = 180.0;
    // float bili = w / h;
    // 圆角半径：取短的来（长方形取宽）
    // float edge = 0.07;
    // // 图片中心
    // vec2 center_p = vec2(0.5, 0.5);


    // 
    // float isShow = 1.0;
    // 矩形
    // 宽
    // float width = 1.0 - edge*0.2;
    // isShow = step(abs(edge), v_uv0.x);
    // float x = step(abs(v_uv0.x*w - 0.5*w), w * 0.5 - edge * h);
    // isShow *= x;
    // // isShow = step(v_uv0.x, 1.0-edge);
    // // isShow = step(0.2, v_uv0.y);
    // // isShow = step(v_uv0.y, 0.8);
    // float y = step(abs(v_uv0.y*h - 0.5*h), (0.5-edge)*h);
    // isShow *= y;




    // float x = bili*v_uv0.x;
    // //计算Y轴方向距离
    // float y = v_uv0.y;
    // //运用椭圆方程计算片元的alpha值，_Ellipse为椭圆系数
    // float factor = clamp(pow(abs(x), 2.0) + pow(abs(y), 2.0), 0.0, 1.0);

    // float tmp = step(factor, 1.0);
    // o.a *= (1.0 - tmp) + tmp * factor;



    // 宽高比
    float w = 640.0;
    float h = 180.0;
    float isShow = 1.0;
    float edge = 0.1;
    float side = 0.0001;
    // 圆半径
    float rx = h * edge;
    float ry = h * edge;

    vec2 p_uv = vec2(v_uv0.x * w, v_uv0.y * h);

    // 左上角中心
    vec2 p_l_u = vec2(rx, ry);
    // 左下角
    vec2 p_l_d = vec2(rx, h - ry);
    // 右上角
    vec2 p_r_u = vec2(w -rx, ry);
    // 右下角
    vec2 p_r_d = vec2(w - rx, h - ry);

    // 左上角区域
    float dis0 = distance(p_uv, p_l_u);
    dis0 = smoothstep(rx, rx - side, dis0);
    // 左下角
    float dis1 = distance(p_uv, p_l_d);
    dis1 = smoothstep(rx, rx - side, dis1);
    // 右上角
    float dis2 = distance(p_uv, p_r_u);
    dis2 = smoothstep(rx, rx - side, dis2);
    // 右下角
    float dis3 = distance(p_uv, p_r_d);
    dis3 = smoothstep(rx, rx - side, dis3);


    float disX = smoothstep(p_uv.x, p_uv.x - side ,rx) * smoothstep(w - rx, w - rx - side, p_uv.x);
    float disY = smoothstep(p_uv.y, p_uv.y - side, ry) * smoothstep(h - ry, h - ry - side, p_uv.y);
    o.a *= (disX + disY);
    o.a += (dis0 + dis1 + dis2 + dis3);
    gl_FragColor = o;


    // 矩形裁剪
  


    // float u_edge = 0.1;

    // float edge = u_edge;
    // vec2 uv = v_uv0.xy - vec2(0.5, 0.5);
    // float rx = abs(uv.x*3.5) - (0.5 - edge);
    // float ry = abs(uv.y) - (0.5 - edge);
    // float mx = step(0.5 - edge, abs(uv.x));
    // float my = step(0.5 - edge, abs(uv.y));
    // float radius = length(vec2(rx, ry));
    // float a = 1.0 - mx * my * step(edge, radius) * smoothstep(0., edge * 0.02, radius - edge);
    // gl_FragColor = vec4(o.rgb, o.a * a);


    // float edge = 0.1;
    // vec4 color = texture2D(texture, v_uv0);
    // vec2 s_uv = vec2(v_uv0.x, v_uv0.y);
    // vec2 uv = v_uv0 - vec2(0.5, 0.5);
    // float rx = abs(uv.x) - (0.5 - edge);
    // float ry = abs(uv.y) - (0.5 - edge);
    // float mx = step(0.5 - edge, abs(uv.x));
    // float my = step(0.5 - edge, abs(uv.y));
    // float radius = length(vec2(rx, ry));
    // float a = 1.0 - mx * my * step(edge, radius) * smoothstep(0., edge * 0.02, radius - edge);
    // gl_FragColor = vec4(color.rgb, color.a * a);
  }
}%

// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        offset: { value: 0.1, editor: {range: [0.0, 0.6]} }
        transFlag: { value: 1.0}
        # mat_vp: { value:[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  uniform FragConstants{
    mediump mat4 mat_vp;
  };
  // mat4 mat_vp = mat4([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0])
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = mat_vp * cc_matWorld * pos;
    #else
    pos = mat_vp * pos;
    #endif


    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform self {
    float offset;
    float transFlag;
  }
  #endif

  void main () {
    ////****用offset和transFlag//
    vec4 o = vec4(1, 1, 1, 1);
    
    vec2 uv = v_uv0;
    if (transFlag > 0.0)
      uv.y = uv.y + (uv.y - 0.5)*uv.x*offset;
    else 
      uv.y = uv.y + (uv.y - 0.5)*(1.0 - uv.x)*offset;

    #if USE_TEXTURE
      o = texture(texture, v_uv0);
    #endif

    // if (uv.y < 0.0 || uv.y > 1.0) {
    //   o.a = 0.0;
    // }
    
    // o *= v_color;
  
    // ALPHA_TEST(o);
  
    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%

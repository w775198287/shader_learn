// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        topColor : { value : [1, 1, 1, 1], inspector: {type: color} }
        midColor : { value : [1, 1, 1, 1], inspector: {type: color} }
        botColor : { value : [1, 1, 1, 1], inspector: {type: color} }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform colors {
    vec4 topColor;
    vec4 midColor;
    vec4 botColor;
  }
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      // o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    float dis = 0.5;

    float y = v_uv0.y;

    float side = 0.19;
    float y_top = side;
    float y_mid = 0.65;
    float y_botm = 1.0 - side;
    float disUp = y_mid - y_top;
    float disDown = y_botm - y_mid;

    float PI = 3.1415;
    if(y >= y_top && y <= y_mid){
      vec3 t_Color = topColor.rgb * ((y_mid - y) / disUp);
      vec3 m_color = midColor.rgb*(y - y_top) / disUp;
      o.rgb = (t_Color + m_color);
    }else if(y > y_mid && y <= y_botm){
      vec3 m_color = midColor.rgb*(y_botm - y) / disDown;
      vec3 b_color = botColor.rgb*((y - y_mid)) / disDown;
      o.rgb *= (m_color + b_color);
    }

    gl_FragColor = o;
  }
}%

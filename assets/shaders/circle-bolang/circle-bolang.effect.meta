{
  "ver": "1.0.23",
  "uuid": "8b583a90-fa5c-4528-baed-cfa6103fc0fe",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float s_time;\n\n#endif\n\nvoid main () {\n\n  vec2 uv = v_uv0;\n  vec2 center_p = vec2(0.5, 0.7);\n  float dis = distance(center_p, uv);\n  float r = 0.02+s_time*0.5;\n  float width = 0.005;\n  float border = 0.01;\n  border *= r * 20.0;\n  float circle = smoothstep(r + width + border, r + width, dis) - smoothstep(r, r -border, dis);\n  circle *= 0.4;\n  circle *= max(1.0 - dis, 0.0);\n\n  uv = uv + (uv - center_p)*(dis-r)* 2. * circle;\n\n  vec4 tex = texture2D(texture, uv);\n\n  gl_FragColor = vec4(tex.xyz, tex.w);\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform selfDefined{\n  float s_time;\n};\n#endif\n\nvoid main () {\n\n  vec2 uv = v_uv0;\n  vec2 center_p = vec2(0.5, 0.7);\n  float dis = distance(center_p, uv);\n  float r = 0.02+s_time*0.5;\n  float width = 0.005;\n  float border = 0.01;\n  border *= r * 20.0;\n  float circle = smoothstep(r + width + border, r + width, dis) - smoothstep(r, r -border, dis);\n  circle *= 0.4;\n  circle *= max(1.0 - dis, 0.0);\n\n  uv = uv + (uv - center_p)*(dis-r)* 2. * circle;\n\n  vec4 tex = texture2D(texture, uv);\n\n  gl_FragColor = vec4(tex.xyz, tex.w);\n}\n"
      }
    }
  ],
  "subMetas": {}
}
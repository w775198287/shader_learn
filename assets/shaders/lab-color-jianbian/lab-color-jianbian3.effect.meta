{
  "ver": "1.0.23",
  "uuid": "d6e41796-4207-48a7-950e-74e4bb72eec9",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 topColor;\nuniform vec4 midColor;\nuniform vec4 botColor;\n#endif\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  float dis = 0.5;\n\n  float y = v_uv0.y;\n\n  float side = 0.19;\n  float y_top = side;\n  float y_mid = 0.65;\n  float y_botm = 1.0 - side;\n  float disUp = y_mid - y_top;\n  float disDown = y_botm - y_mid;\n\n  float PI = 3.1415;\n  if(y >= y_top && y <= y_mid){\n    vec3 t_Color = topColor.rgb * ((y_mid - y) / disUp);\n    vec3 m_color = midColor.rgb*(y - y_top) / disUp;\n    o.rgb = (t_Color + m_color);\n  }else if(y > y_mid && y <= y_botm){\n    vec3 m_color = midColor.rgb*(y_botm - y) / disDown;\n    vec3 b_color = botColor.rgb*((y - y_mid)) / disDown;\n    o.rgb *= (m_color + b_color);\n  }\n\n  gl_FragColor = o;\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform colors {\n  vec4 topColor;\n  vec4 midColor;\n  vec4 botColor;\n}\n#endif\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  float dis = 0.5;\n\n  float y = v_uv0.y;\n\n  float side = 0.19;\n  float y_top = side;\n  float y_mid = 0.65;\n  float y_botm = 1.0 - side;\n  float disUp = y_mid - y_top;\n  float disDown = y_botm - y_mid;\n\n  float PI = 3.1415;\n  if(y >= y_top && y <= y_mid){\n    vec3 t_Color = topColor.rgb * ((y_mid - y) / disUp);\n    vec3 m_color = midColor.rgb*(y - y_top) / disUp;\n    o.rgb = (t_Color + m_color);\n  }else if(y > y_mid && y <= y_botm){\n    vec3 m_color = midColor.rgb*(y_botm - y) / disDown;\n    vec3 b_color = botColor.rgb*((y - y_mid)) / disDown;\n    o.rgb *= (m_color + b_color);\n  }\n\n  gl_FragColor = o;\n}\n"
      }
    }
  ],
  "subMetas": {}
}